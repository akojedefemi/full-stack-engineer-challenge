{
	"info": {
		"_postman_id": "e2a0d110-081f-4ca8-9944-68cfcaf778f2",
		"name": "guardrails-code-challenge-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create a result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Create result id variable\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"resultId\", jsonData.id);",
							"});",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"repositoryName\": \"adfs\",\n    \"findings\": [\n        {\n            \"type\": \"sast\",\n            \"ruleId\": \"G402\",\n            \"location\": {\n                \"path\": \"connectors/apigateway.go\",\n                \"positions\": {\n                    \"begin\": {\n                        \"line\": 60\n                    }\n                }\n            },\n            \"metadata\": {\n                \"description\": \"TLS InsecureSkipVerify set true.\",\n                \"severity\": \"HIGH\"\n            }\n        },\n        {\n            \"type\": \"sast\",\n            \"ruleId\": \"G404\",\n            \"location\": {\n                \"path\": \"util/util.go\",\n                \"positions\": {\n                    \"begin\": {\n                        \"line\": 32\n                    }\n                }\n            },\n            \"metadata\": {\n                \"description\": \"Use of weak random number generator (math/rand instead of crypto/rand)\",\n                \"severity\": \"HIGH\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/results",
					"host": [
						"{{url}}"
					],
					"path": [
						"results"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a result with missing repositoryName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"repositoryName is missing\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"repositoryName should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"findings\": [\n        {\n            \"type\": \"sast\",\n            \"ruleId\": \"G402\",\n            \"location\": {\n                \"path\": \"connectors/apigateway.go\",\n                \"positions\": {\n                    \"begin\": {\n                        \"line\": 60\n                    }\n                }\n            },\n            \"metadata\": {\n                \"description\": \"TLS InsecureSkipVerify set true.\",\n                \"severity\": \"HIGH\"\n            }\n        },\n        {\n            \"type\": \"sast\",\n            \"ruleId\": \"G404\",\n            \"location\": {\n                \"path\": \"util/util.go\",\n                \"positions\": {\n                    \"begin\": {\n                        \"line\": 32\n                    }\n                }\n            },\n            \"metadata\": {\n                \"description\": \"Use of weak random number generator (math/rand instead of crypto/rand)\",\n                \"severity\": \"HIGH\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/results",
					"host": [
						"{{url}}"
					],
					"path": [
						"results"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"repositoryName\": \"1231213\",\n    \"findings\": [\n        {\n            \"type\": \"sast\",\n            \"ruleId\": \"G402\",\n            \"location\": {\n                \"path\": \"connectors/apigateway.go\",\n                \"positions\": {\n                    \"begin\": {\n                        \"line\": 60\n                    }\n                }\n            },\n            \"metadata\": {\n                \"description\": \"TLS InsecureSkipVerify set true.\",\n                \"severity\": \"HIGH\"\n            }\n        },\n        {\n            \"type\": \"sast\",\n            \"ruleId\": \"G404\",\n            \"location\": {\n                \"path\": \"util/util.go\",\n                \"positions\": {\n                    \"begin\": {\n                        \"line\": 32\n                    }\n                }\n            },\n            \"metadata\": {\n                \"description\": \"Use of weak random number generator (math/rand instead of crypto/rand)\",\n                \"severity\": \"HIGH\"\n            }\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/results/{{resultId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"results",
						"{{resultId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a result with missing repositoryName",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Email is missing\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"email must be longer than or equal to 10 characters\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User Modified\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/results/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"results",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a nonexistent result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "317968ef-610a-4f58-86f1-aebda47cb4f3",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"User trying to be updated does not exist\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The user you are trying to update doesn't exist in the db\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Integration Test User Modified\",\r\n\t\"email\": \"user@citest.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/results/fakeId",
					"host": [
						"{{url}}"
					],
					"path": [
						"results",
						"fakeId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3d18402-eb02-4ec5-a3b6-486af7a84f88",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User is created and can be fetched successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(\"user@citest.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/results/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"results",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get nonexistent result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3d18402-eb02-4ec5-a3b6-486af7a84f88",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User is not in the DB\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"The user you are trying to retrieve doesn't exist in the db\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{jwtToken}}"
					}
				],
				"url": {
					"raw": "{{url}}/results/fakeId",
					"host": [
						"{{url}}"
					],
					"path": [
						"results",
						"fakeId"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f43684e7-b04e-4b96-aa0d-2b8048dbe839",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwtToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/results",
					"host": [
						"{{url}}"
					],
					"path": [
						"results"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}