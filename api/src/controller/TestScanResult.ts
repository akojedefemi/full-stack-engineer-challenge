import { BaseContext } from 'koa';
import { request, summary, path, body, responsesAll, tagsAll } from 'koa-swagger-decorator';
import { OK, CREATED, BAD_REQUEST, NO_CONTENT } from 'http-status-codes';

import { Result, resultSchema } from '../models/result';
import TestScanResultService from '../service/TestScanResult';

@responsesAll({ 200: { description: 'success' }, 400: { description: 'bad request' }, 401: { description: 'unauthorized, missing/wrong jwt token' } })
@tagsAll(['Result'])
export default class ResultController {

    @request('get', '/results')
    @summary('Find all results')
    public static async getResults(ctx: BaseContext) {
        const results = await TestScanResultService.find();

        ctx.status = OK;
        ctx.body = results;
    }

    @request('get', '/results/{id}')
    @summary('Find result by id')
    @path({ id: { type: 'number', required: true, description: 'id of result' } })
    public static async getResult(ctx: BaseContext) {
        const id = parseInt(ctx.params.id, 10);
        const result = await TestScanResultService.findOne(id);

        if (result) {
            ctx.status = OK;
            ctx.body = result;
        } else {
            ctx.status = BAD_REQUEST;
            ctx.body = 'The result you are trying to retrieve doesn\'t exist in the db';
        }
    }

    @request('post', '/results')
    @summary('Create a result')
    @body(resultSchema)
    public static async createResult(ctx: BaseContext) {
        const result = await TestScanResultService.create(ctx.request.body);

        if (result instanceof Result) {
            ctx.status = CREATED;
            ctx.body = { result };
        } else {
            ctx.status = BAD_REQUEST;
            ctx.body = { errors: result };
        }
    }

    @request('put', '/results/{id}')
    @summary('Update a result')
    @path({ id: { type: 'number', required: true, description: 'id of result' } })
    @body(resultSchema)
    public static async updateResult(ctx: BaseContext) {
        const id = parseInt(ctx.params.id, 10);
        const result = await TestScanResultService.update(id, ctx.request.body);

        if (result instanceof Result) {
            ctx.status = NO_CONTENT;
        } else {
            ctx.status = BAD_REQUEST;
            ctx.body = { errors: result };
        }
    }

    @request('delete', '/results/{id}')
    @summary('Delete result by id')
    @path({
        id: { type: 'number', required: true, description: 'id of result' }
    })
    public static async deleteResult(ctx: BaseContext) {
        const id = parseInt(ctx.params.id, 10);
        const result = await TestScanResultService.delete(id);

        if (!result) {
            ctx.status = OK;
        } else {
            ctx.status = BAD_REQUEST;
            ctx.body = { errors: result };
        }
    }

    @request('delete', '/testresults')
    @summary('Delete results generated by integration and load tests')
    public static async deleteTestResults(ctx: BaseContext) {
        await TestScanResultService.deleteTestResults();

        ctx.status = 204;
    }
}
